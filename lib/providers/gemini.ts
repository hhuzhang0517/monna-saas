import { ImageGenerateParams, GoogleGenerativeAI } from '@google/genai'
import { uploadToStorage } from '../storage'

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!)

export async function generateWithGemini(prompt: string): Promise<string> {
  try {
    const model = genAI.getImageModel('imagen-3.0-generate-002')
    
    const params: ImageGenerateParams = {
      prompt,
      number: 1,
      outputOptions: {
        mimeType: 'image/png',
        aspectRatio: '1:1',
        compressionQuality: 80,
      },
      safetySettings: [
        {
          category: 'HARM_CATEGORY_HATE_SPEECH',
          threshold: 'BLOCK_ONLY_HIGH',
        },
        {
          category: 'HARM_CATEGORY_HARASSMENT', 
          threshold: 'BLOCK_ONLY_HIGH',
        },
        {
          category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
          threshold: 'BLOCK_ONLY_HIGH',
        },
      ],
    }

    const result = await model.generate(params)
    
    if (!result.images || result.images.length === 0) {
      throw new Error('No image generated by Gemini')
    }

    const imageData = result.images[0]
    const buffer = Buffer.from(imageData.bytesBase64Encoded, 'base64')
    
    // 上传到Supabase Storage（带SynthID水印）
    const url = await uploadToStorage(buffer, 'gemini-image.png', 'image/png')
    
    return url
  } catch (error: any) {
    console.error('Gemini generation error:', error)
    throw new Error(`Gemini generation failed: ${error?.message || 'Unknown error'}`)
  }
}
